#!/bin/bash
#
# Armbian Extension: install-ufi-firmware
# Installs custom drivers and firmware for UFI series boards during the build process.
#

# This function is a build hook that runs *before* the kernel DEB is installed.
function post_install_kernel_debs__install_ufi_firmware_debs() {
    # Exit script if any command fails.
    set -e
    
    echo "INFO: Installing modemmanager, bsdmainutils, gawk for qrtr-tools rmtfs"
    use_clean_environment="yes" chroot_sdcard_apt_get_install "modemmanager bsdmainutils gawk qrtr-tools rmtfs mkbootimg"

    # Ensure the BOARD variable is set, as it is required for logic.
    if [ -z "$BOARD" ]; then echo "ERROR: \$BOARD is empty." >&2; exit 1; fi

    # Check if the current build is for a supported UFI board.
    case "$BOARD" in
        "ufi001c"|"ufi003"|"uz801")
            # This is a target board, proceed.
            ;;
        *)
            # If not a target board, exit gracefully.
            return 0
            ;;
    esac

    echo ">>> [${BOARD}] Running install-ufi-firmware logic (pre-install hook)..."
    
    # Define base URL for downloading firmware and utility packages.
    local BASE_URL="https://raw.githubusercontent.com/YANXIAOXIH/UFI001C-Armbian/refs/heads/main"
    local UTILS_DEB_PATH="common-file/openstick-utils-all.deb"
    local FIRMWARE_DEB_PATH=""

    # Select the correct firmware package based on the board model.
    if [ "$BOARD" == "ufi003" ]; then
        FIRMWARE_DEB_PATH="modem/firmware-ufi003.deb"
    else
        FIRMWARE_DEB_PATH="modem/firmware-ufi001c.deb"
    fi
    
    # Construct the full download URLs for the packages.
    local FIRMWARE_DEB_URL="${BASE_URL}/${FIRMWARE_DEB_PATH}"
    local UTILS_DEB_URL="${BASE_URL}/${UTILS_DEB_PATH}"

    # If a GitHub mirror is enabled, prepend it to the URLs for faster downloads.
    if [[ -n "${GITHUB_MIRROR}" ]]; then
        local GHPROXY_URL="${GHPROXY_URL:-https://ghfast.top/}"
        echo "INFO: Applying GitHub mirror: ${GHPROXY_URL}"
        FIRMWARE_DEB_URL="${GHPROXY_URL}${FIRMWARE_DEB_URL}"
        UTILS_DEB_URL="${GHPROXY_URL}${UTILS_DEB_URL}"
    fi

    # Define a temporary directory inside the target filesystem for downloads.
    local TEMP_DIR="${SDCARD}/tmp"
    echo "INFO: Downloading packages..."
    # Download the firmware and utility packages to the temp directory.
    run_host_command_logged curl -L --retry 3 --fail "${FIRMWARE_DEB_URL}" -o "${TEMP_DIR}/$(basename ${FIRMWARE_DEB_URL})"
    run_host_command_logged curl -L --retry 3 --fail "${UTILS_DEB_URL}" -o "${TEMP_DIR}/$(basename ${UTILS_DEB_URL})"

    echo "INFO: Installing packages and fixing dependencies inside the image..."
    # Execute commands inside the target root filesystem (chroot) to install packages.
    chroot_sdcard "
        set -e
        # Attempt to install .deb packages, ignoring initial dependency errors.
        dpkg -i /tmp/*.deb > /dev/null 2>&1 || true
        # Use apt to automatically fix any broken dependencies and complete the installation.
        apt-get update
        apt-get -f install -y --no-install-recommends
    "
    
    # Clean up by removing the downloaded .deb files.
    run_host_command_logged rm -f ${TEMP_DIR}/*.deb
    echo ">>> [${BOARD}] Custom firmware installation completed."
    
    # =========================================================
    local WIFI_SSID="L"
    local WIFI_PSK="00000000"
    # =========================================================

    # --- Pre-configure the primary Wi-Fi network ---
    echo ">>> [${BOARD}] Pre-configuring Wi-Fi connection for SSID: ${WIFI_SSID}"

    if [ -z "${WIFI_SSID}" ]; then
        echo "INFO: WIFI_SSID is not set. Skipping Wi-Fi pre-configuration."
    else
        mkdir -p "${SDCARD}/etc/NetworkManager/system-connections/"
        
        # Create the NetworkManager connection profile inside the target filesystem.
        cat > "${SDCARD}/etc/NetworkManager/system-connections/${WIFI_SSID}.nmconnection" <<- EOF
			[connection]
			id=${WIFI_SSID}
			uuid=$(uuidgen)
			type=wifi
			autoconnect=true
			[wifi]
			mode=infrastructure
			ssid=${WIFI_SSID}
			[wifi-security]
			key-mgmt=wpa-psk
			psk=${WIFI_PSK}
			[ipv4]
			method=auto
			[ipv6]
			method=auto
		EOF
        chroot_sdcard "chmod 600 /etc/NetworkManager/system-connections/${WIFI_SSID}.nmconnection"
        echo ">>> Wi-Fi profile for '${WIFI_SSID}' has been built-in."
    fi

    chroot_sdcard 'mkdir -p /etc/iptables/'
    chroot_sdcard 'cat <<- EOF > /etc/iptables/rules.v4
        # Generated by iptables-save v1.8.7 on Sat Feb  5 04:30:20 2025
        *nat
        :PREROUTING ACCEPT [0:0]
        :INPUT ACCEPT [0:0]
        :OUTPUT ACCEPT [4:276]
        :POSTROUTING ACCEPT [0:0]
        -A POSTROUTING -s 192.168.0.0/16 -j MASQUERADE
        COMMIT
        # Completed on Sat Feb  5 04:30:20 2025
        # Generated by iptables-save v1.8.7 on Sat Feb  5 04:30:20 2025
        *filter
        :INPUT ACCEPT [8:776]
        :FORWARD ACCEPT [0:0]
        :OUTPUT ACCEPT [16:1328]
        -A FORWARD -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
        -A FORWARD -s 192.168.0.0/16 -j ACCEPT
        COMMIT
        # Completed on Sat Feb  5 04:30:20 2025
	EOF'

    chroot_sdcard "chmod 600 /etc/iptables/rules.v4"

    sed -i s/'openstick-failsafe'/$BOARD-AP/g $SDCARD/usr/sbin/openstick-button-monitor.sh
    sed -i s/'openstick-failsafe'/$BOARD-AP/g $SDCARD/usr/sbin/openstick-gc-manager.sh
    sed -i s/'openstick-failsafe'/$BOARD-AP/g $SDCARD/usr/sbin/openstick-startup-diagnose.sh
    sed -i s/'failsafe-ap'/$BOARD-AP/g $SDCARD/usr/sbin/openstick-button-monitor.sh
    sed -i s/'failsafe-ap'/$BOARD-AP/g $SDCARD/usr/sbin/openstick-gc-manager.sh
    sed -i s/'failsafe-ap'/$BOARD-AP/g $SDCARD/usr/sbin/openstick-startup-diagnose.sh
    sed -i s/'00000000'/$WIFI_PSK/g $SDCARD/usr/sbin/openstick-button-monitor.sh
    sed -i s/'00000000'/$WIFI_PSK/g $SDCARD/usr/sbin/openstick-gc-manager.sh
    sed -i s/'00000000'/$WIFI_PSK/g $SDCARD/usr/sbin/openstick-startup-diagnose.sh
    sed -i s/'192.168.69.1'/192.168.5.1/g $SDCARD/usr/sbin/openstick-button-monitor.sh
    sed -i s/'192.168.69.1'/192.168.5.1/g $SDCARD/usr/sbin/openstick-gc-manager.sh
    sed -i s/'192.168.69.1'/192.168.5.1/g $SDCARD/usr/sbin/openstick-startup-diagnose.sh

    sed -i s/'usb-failsafe'/$BOARD-USB/g $SDCARD/usr/sbin/openstick-startup-diagnose.sh
}